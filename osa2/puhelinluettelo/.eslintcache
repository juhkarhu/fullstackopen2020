[{"/home/juhanaka/Koulu/FullStackOpen/osa2/puhelinluettelo/src/services/contacts.js":"1","/home/juhanaka/Koulu/FullStackOpen/osa2/puhelinluettelo/src/App.js":"2","/home/juhanaka/Koulu/FullStackOpen/osa2/puhelinluettelo/src/components/DisplayContact.js":"3","/home/juhanaka/Koulu/FullStackOpen/osa2/puhelinluettelo/src/components/AddPersonForm.js":"4","/home/juhanaka/Koulu/FullStackOpen/osa2/puhelinluettelo/src/index.js":"5","/home/juhanaka/Koulu/FullStackOpen/osa2/puhelinluettelo/src/components/SearchForm.js":"6","/home/juhanaka/Koulu/FullStackOpen/osa2/puhelinluettelo/src/components/Notification.js":"7"},{"size":1087,"mtime":1613032323375,"results":"8","hashOfConfig":"9"},{"size":5407,"mtime":1613033180228,"results":"10","hashOfConfig":"9"},{"size":290,"mtime":1613033716622,"results":"11","hashOfConfig":"9"},{"size":447,"mtime":1607511622884,"results":"12","hashOfConfig":"9"},{"size":170,"mtime":1611127714797,"results":"13","hashOfConfig":"9"},{"size":160,"mtime":1607511622884,"results":"14","hashOfConfig":"9"},{"size":227,"mtime":1611127493475,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1gk987b",{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/juhanaka/Koulu/FullStackOpen/osa2/puhelinluettelo/src/services/contacts.js",["31"],"/home/juhanaka/Koulu/FullStackOpen/osa2/puhelinluettelo/src/App.js",["32"],"import React, { useState, useEffect, useCallback } from 'react'\nimport SearchForm from './components/SearchForm'\nimport AddPersonForm from './components/AddPersonForm'\nimport DisplayContact from './components/DisplayContact'\nimport contactService from './services/contacts'\nimport Notification from './components/Notification'\n\n\nconst App = () => {\n\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [searchTerm, setSearchTerm] = useState('')\n  const personsToShow = persons.filter(person => person.name.toLowerCase().includes(searchTerm.toLowerCase()))\n  const [message, setMessage] = useState(null)\n  const [className, setClassName] = useState(null)\n\n\n  const fetchPersons = useCallback(() => {\n    contactService\n      .getAll()\n      .then(returnedContacts => {\n        setPersons(returnedContacts)\n      })\n  }, [])\n\n  useEffect(() => {\n    contactService\n      .getAll()\n      .then(initialContacts => {\n        setPersons(initialContacts)\n      })\n  }, [])\n\n\n  const addPerson = (event) => {\n    event.preventDefault()\n    const personObject = {\n      name: newName,\n      number: newNumber\n    }\n    console.log(personObject)\n    // Tutkitaan onko listassa jo saman nimista henkiloa. \n    const hit = persons.filter(person => person.name.toLowerCase() === newName.toLowerCase()).length > 0\n    console.log(hit)\n\n    if (personObject.number.length <= 0) {\n      // console.log('tapahtuu jos number pituus pienempi tai yhtasuuri kuin nolla')\n      setClassName('error')\n      setMessage(\n        `Only a name was given, you need to specify a number as well`\n      )\n      setTimeout(() => {\n        setClassName(null)\n        setMessage(null)\n      }, 2000)\n    } else if (hit) {\n      // console.log('hit oli totta, kysytaan halutaanko paivittaa tietue')\n      if (window.confirm(`${newName} is already added to phonebook, replace the old number with a new number?`)) {\n        \n        // ID luodaan vasta backendissa, mitas nyt.\n        // const personObject = persons.filter(person => person.name.toLowerCase() === newName.toLowerCase())\n        \n        \n        \n        // console.log('paivitetaan numero')\n        const found_person = persons.filter(person => person.name.toLowerCase() === personObject.name.toLowerCase())\n        // console.log('loydetty henkilo', found_person[0])\n\n        found_person[0].number = personObject.number\n        // console.log('loydetty henkilo numeron paivityksen jalkeen', found_person[0])\n        const id = found_person[0].id\n        // console.log('loydetty id', id)\n        contactService\n          .put(found_person[0])\n          .then(() => {\n            fetchPersons()\n          })\n        setClassName('update')\n        setMessage(\n          `${found_person[0].name}'s number was updated`\n        )\n        setTimeout(() => {\n          setClassName(null)\n          setMessage(null)\n        }, 2000)\n\n      }\n      else {\n        setNewName('')\n        setNewNumber('')\n        setSearchTerm('')\n      }\n    }\n    else {\n      contactService\n        .create(personObject)\n        .then(returnedContacts => {\n          setPersons(persons.concat(returnedContacts))\n          setNewName('')\n          setNewNumber('')\n          setSearchTerm('')\n        })\n        setClassName('update')\n        setMessage(\n          `${personObject.name} was added to the phonebook`\n        )\n        setTimeout(() => {\n          setClassName(null)\n          setMessage(null)\n        }, 2000)\n    }\n  }\n\n  const toggleDelete = (id) => {\n    console.log('note no ' + id + ' needs to be deleted')\n    const pers = personsToShow.find(person => person.id === id)\n    if (window.confirm(`Delete ${pers.name} ?`)) {\n      contactService\n        .remove(id)\n        .then(() => {\n          fetchPersons()\n          setClassName('delete')\n          setMessage(\n            `${pers.name} was removed from the phonebook`\n          )\n          setTimeout(() => {\n            setClassName(null)\n            setMessage(null)\n          }, 2000)\n        })\n        .catch(error => {\n          fetchPersons()\n          setClassName('delete')\n          setMessage(\n            `Information of ${pers.name} has already been removed from the server.`\n          )\n          setTimeout(() => {\n            setClassName(null)\n            setMessage(null)\n          }, 2000)\n        })\n\n    }\n  }\n\n  const handlePersonChange = (event) => {\n    event.preventDefault()\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    event.preventDefault()\n    setNewNumber(event.target.value)\n  }\n\n  const handleSearchTermChange = (event) => {\n    event.preventDefault()\n    setSearchTerm(event.target.value.toLowerCase())\n  }\n\n\n\n\n  return (\n    <div>\n      <h1>Phonebook v. 0.0.4</h1>\n      <Notification message={message} className={className} />\n      <SearchForm onChange={handleSearchTermChange} />\n      <h2>add a new</h2>\n      <AddPersonForm onSubmit={addPerson} nameValue={newName} onNameChange={handlePersonChange} numberValue={newNumber} onNumberChange={handleNumberChange} />\n      <h2>Contacts</h2>\n      <ul>\n        {personsToShow.map(person => (\n          <DisplayContact\n            key={person.id}\n            item={person}\n            toggleDelete={() => toggleDelete(person.id)}\n          />\n        ))}\n      </ul>\n\n    </div>\n\n  )\n\n}\n\nexport default App","/home/juhanaka/Koulu/FullStackOpen/osa2/puhelinluettelo/src/components/DisplayContact.js",[],"/home/juhanaka/Koulu/FullStackOpen/osa2/puhelinluettelo/src/components/AddPersonForm.js",[],"/home/juhanaka/Koulu/FullStackOpen/osa2/puhelinluettelo/src/index.js",[],"/home/juhanaka/Koulu/FullStackOpen/osa2/puhelinluettelo/src/components/SearchForm.js",[],"/home/juhanaka/Koulu/FullStackOpen/osa2/puhelinluettelo/src/components/Notification.js",[],{"ruleId":"33","severity":1,"message":"34","line":35,"column":1,"nodeType":"35","endLine":35,"endColumn":47},{"ruleId":"36","severity":1,"message":"37","line":73,"column":15,"nodeType":"38","messageId":"39","endLine":73,"endColumn":17},"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-unused-vars","'id' is assigned a value but never used.","Identifier","unusedVar"]